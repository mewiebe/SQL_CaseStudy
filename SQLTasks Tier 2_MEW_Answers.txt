/* Welcome to the SQL mini project. You will carry out this project partly in
the PHPMyAdmin interface, and partly in Jupyter via a Python connection.

This is Tier 2 of the case study, which means that there'll be less guidance for you about how to setup
your local SQLite connection in PART 2 of the case study. This will make the case study more challenging for you: 
you might need to do some digging, aand revise the Working with Relational Databases in Python chapter in the previous resource.

Otherwise, the questions in the case study are exactly the same as with Tier 1. 

PART 1: PHPMyAdmin
You will complete questions 1-9 below in the PHPMyAdmin interface. 
Log in by pasting the following URL into your browser, and
using the following Username and Password:

URL: https://sql.springboard.com/
Username: student
Password: learn_sql@springboard

The data you need is in the "country_club" database. This database
contains 3 tables:
    i) the "Bookings" table,
    ii) the "Facilities" table, and
    iii) the "Members" table.

In this case study, you'll be asked a series of questions. You can
solve them using the platform, but for the final deliverable,
paste the code for each solution into this script, and upload it
to your GitHub.

Before starting with the questions, feel free to take your time,
exploring the data, and getting acquainted with the 3 tables. */


/* QUESTIONS 
/* Q1: Some of the facilities charge a fee to members, but some do not.
Write a SQL query to produce a list of the names of the facilities that do. */


SELECT name
FROM `Facilities`
WHERE membercost >0


ANSWER: 
name
Tennis Court 1
Tennis Court 2
Massage Room 1
Massage Room 2
Squash Court


/* Q2: How many facilities do not charge a fee to members? */


SELECT COUNT( * )
FROM `Facilities`
WHERE membercost =0

ANSWER: 4 


/* Q3: Write an SQL query to show a list of facilities that charge a fee to members,
where the fee is less than 20% of the facility's monthly maintenance cost.
Return the facid, facility name, member cost, and monthly maintenance of the
facilities in question. */


SELECT facid, name, membercost, monthlymaintenance
FROM `Facilities`
WHERE membercost < 0.2 * monthlymaintenance
AND membercost >0

ANSWER:

facid	name	membercost	monthlymaintenance	
0	Tennis Court 1	5.0	200
1	Tennis Court 2	5.0	200
4	Massage Room 1	9.9	3000
5	Massage Room 2	9.9	3000
6	Squash Court	3.5	80

/* Q4: Write an SQL query to retrieve the details of facilities with ID 1 and 5.
Try writing the query without using the OR operator. */

SELECT *
FROM `Facilities`
WHERE facid
IN ( 1, 5 )

facid	name	membercost	guestcost	initialoutlay	monthlymaintenance	
1	Tennis Court 2	5.0	25.0	8000	200
5	Massage Room 2	9.9	80.0	4000	3000


/* Q5: Produce a list of facilities, with each labelled as
'cheap' or 'expensive', depending on if their monthly maintenance cost is
more than $100. Return the name and monthly maintenance of the facilities
in question. */

SELECT name, monthlymaintenance,
CASE WHEN monthlymaintenance >100
THEN 'Expensive'
ELSE 'Cheap'
END AS Fee_Type
FROM `Facilities`



name	monthlymaintenance	Fee_Type	
Tennis Court 1	200	Expensive
Tennis Court 2	200	Expensive
Badminton Court	50	Cheap
Table Tennis	10	Cheap
Massage Room 1	3000	Expensive
Massage Room 2	3000	Expensive
Squash Court	80	Cheap
Snooker Table	15	Cheap
Pool Table	15	Cheap


/* Q6: You'd like to get the first and last name of the last member(s)
who signed up. Try not to use the LIMIT clause for your solution. */

SELECT firstname, surname
FROM `Members`
WHERE joindate = (

SELECT MAX( joindate )
FROM `Members`
)

ANSWER:
firstname surname
Darren    Smith


/* Q7: Produce a list of all members who have used a tennis court.
Include in your output the name of the court, and the name of the member
formatted as a single column. Ensure no duplicate data, and order by
the member name. */

SELECT DISTINCT CONCAT( firstname, ' ', surname ) AS membername, f.name AS facility_name
FROM `Members` AS m
INNER JOIN `Bookings` AS b ON m.memid = b.memid
INNER JOIN `Facilities` AS f ON b.facid = f.facid
WHERE f.name
IN (
'Tennis Court 1', 'Tennis Court 2'
)
ORDER BY membername, facility_name


membername	facility_name	
Anne Baker	Tennis Court 1
Anne Baker	Tennis Court 2
Burton Tracy	Tennis Court 1
Burton Tracy	Tennis Court 2
Charles Owen	Tennis Court 1
Charles Owen	Tennis Court 2
Darren Smith	Tennis Court 2
David Farrell	Tennis Court 1
David Farrell	Tennis Court 2
David Jones	Tennis Court 1
David Jones	Tennis Court 2
David Pinker	Tennis Court 1
Douglas Jones	Tennis Court 1
Erica Crumpet	Tennis Court 1
Florence Bader	Tennis Court 1
Florence Bader	Tennis Court 2
Gerald Butters	Tennis Court 1
Gerald Butters	Tennis Court 2
GUEST GUEST	Tennis Court 1
GUEST GUEST	Tennis Court 2
Henrietta Rumney	Tennis Court 2
Jack Smith	Tennis Court 1
Jack Smith	Tennis Court 2
Janice Joplette	Tennis Court 1
Janice Joplette	Tennis Court 2
Jemima Farrell	Tennis Court 1
Jemima Farrell	Tennis Court 2
Joan Coplin	Tennis Court 1
John Hunt	Tennis Court 1
John Hunt	Tennis Court 2




/* Q8: Produce a list of bookings on the day of 2012-09-14 which
will cost the member (or guest) more than $30. Remember that guests have
different costs to members (the listed costs are per half-hour 'slot'), and
the guest user's ID is always 0. Include in your output the name of the
facility, the name of the member formatted as a single column, and the cost.
Order by descending cost, and do not use any subqueries. */

SELECT f.name, CONCAT( firstname, ' ', surname ) AS membername,
CASE WHEN b.memid =0 THEN (slots * guestcost)
ELSE (slots * membercost) END AS total_cost
FROM `Facilities` AS f
INNER JOIN `Bookings` AS b
USING ( facid )
INNER JOIN `Members` AS m
USING ( memid )
WHERE CAST( starttime AS DATE ) = '2012-09-14'
HAVING total_cost >30
ORDER BY total_cost DESC

ANSWER

name	membername	total_cost	
Massage Room 2	GUEST GUEST	320.0
Massage Room 1	GUEST GUEST	160.0
Massage Room 1	GUEST GUEST	160.0
Massage Room 1	GUEST GUEST	160.0
Tennis Court 2	GUEST GUEST	150.0
Tennis Court 2	GUEST GUEST	75.0
Tennis Court 1	GUEST GUEST	75.0
Tennis Court 1	GUEST GUEST	75.0
Squash Court	GUEST GUEST	70.0
Massage Room 1	Jemima Farrell	39.6
Squash Court	GUEST GUEST	35.0
Squash Court	GUEST GUEST	35.0


/* Q9: This time, produce the same result as in Q8, but using a subquery. */


SELECT f.name, CONCAT( firstname, ' ', surname ) AS membername,
CASE WHEN b.memid =0
THEN (slots * guestcost)
ELSE (slots * membercost)END AS total_cost
FROM (SELECT *FROM `Bookings`
WHERE CAST( starttime AS DATE ) = '2012-09-14') AS b
INNER JOIN `Facilities` AS f
USING ( facid )
INNER JOIN `Members` AS m
USING ( memid )
HAVING total_cost >30
ORDER BY total_cost DESC



/* PART 2: SQLite

Export the country club data from PHPMyAdmin, and connect to a local SQLite instance from Jupyter notebook 
for the following questions.  

import sqlite3
import pandas as pd
conn = sqlite3.connect("sqlite_db_pythonsqlite.db")

QUESTIONS:
/* Q10: Produce a list of facilities with a total revenue less than 1000.
The output of facility name and total revenue, sorted by revenue. Remember
that there's a different cost for guests and members! */


pd.read_sql_query(
"SELECT name, sum(total_cost) AS REVENUE FROM (SELECT name, CASE WHEN memid =0 THEN (slots * guestcost) ELSE (slots * membercost) END AS total_cost FROM Bookings INNER JOIN Facilities USING (facid)) GROUP BY name HAVING revenue <1000"
 , conn)


	name	REVENUE
0	Pool Table	270
1	Snooker Table	240
2	Table Tennis	18


/* Q11: Produce a report of members and who recommended them in alphabetic surname,firstname order */

pd.read_sql_query("SELECT m1.memid, m1.surname|| ' ' ||m1.firstname as member, m2.surname|| ', ' ||m2.firstname as recommender from Members as m1 LEFT OUTER JOIN members as m2 ON m1.recommendedby= m2.memid WHERE m1.memid not in(0) ORDER BY member", conn)

/* Q12: Find the facilities with their usage by member, but not guests */

pd.read_sql_query("SELECT name as Facility, count(DISTINCT memid) as Total_Members_Used,  sum(slots)*0.5 as Total_Hours FROM Bookings INNER JOIN Facilities using(facid) WHERE memid != 0 GROUP BY FACILITY ",conn)


Facility	Total_Members_Used	Total_Hours
0	Badminton Court	24	543.0
1	Massage Room 1	24	442.0
2	Massage Room 2	12	27.0
3	Pool Table	27	428.0
4	Snooker Table	22	430.0
5	Squash Court	24	209.0
6	Table Tennis	25	397.0
7	Tennis Court 1	23	478.5
8	Tennis Court 2	21	441.0

/* Q13: Find the facilities usage by month, but not guests */

pd.read_sql_query("SELECT name as Facility, strftime('%m',starttime) as Month, count(DISTINCT memid) as Total_Members_Used,  sum(slots)*0.5 as Total_Hours FROM Bookings INNER JOIN Facilities using(facid) WHERE memid != 0 GROUP BY FACILITY, Month ",conn)


Facility	Month	Total_Members_Used	Total_Hours
0	Badminton Court	07	6	82.5
1	Badminton Court	08	17	207.0
2	Badminton Court	09	24	253.5
3	Massage Room 1	07	8	83.0
4	Massage Room 1	08	17	158.0
5	Massage Room 1	09	24	201.0
6	Massage Room 2	07	4	4.0
7	Massage Room 2	08	5	9.0
8	Massage Room 2	09	8	14.0
9	Pool Table	07	8	55.0
10	Pool Table	08	17	151.5
11	Pool Table	09	27	221.5
12	Snooker Table	07	7	70.0
13	Snooker Table	08	14	158.0
14	Snooker Table	09	21	202.0
15	Squash Court	07	6	25.0
16	Squash Court	08	13	92.0
17	Squash Court	09	24	92.0
18	Table Tennis	07	4	49.0
19	Table Tennis	08	18	148.0
20	Table Tennis	09	22	200.0
21	Tennis Court 1	07	6	100.5
22	Tennis Court 1	08	14	169.5
23	Tennis Court 1	09	21	208.5
24	Tennis Court 2	07	8	61.5
25	Tennis Court 2	08	13	172.5
26	Tennis Court 2	09	16	207.0